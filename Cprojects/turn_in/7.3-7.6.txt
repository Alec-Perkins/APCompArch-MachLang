// Exercises 7.3 to 7.6
// A. Perkins

7.3)
	a) float numbers[10] = {0.0, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9};
	b) float *nPtr;
	c) 	for (size_t i=0; i<SIZE; ++i){
			printf("%.1f", numbers[i]);
		}
	d) nPtr = numbers;
		nPtr = &numbers[0];
	e) 	for (size_t i = 0; i<SIZE; ++i) {
			printf("%.3f", *(nPtr + i));
		}
	f)	for (size_t i = 0; i< SIZE; i++){
			printf("%.1f", *(nPtr + i));
		}
	g)	for (size_t i = 0; i< SIZE; i++){
			printf("%.1f", nPtr);
		}
	h) 	numbers[4]
		*(numbers + 4)
		nPtr[4]
		*(nPtr + 4)
	i) 1002532: 8.8
	j) 	1002520
		1002504 : 1.1

7.4)
	a) float *nPtr;
	b) nptr = &numbers1;
	c) printf("The value of fPtr is %f\n", *fPtr);
	d) number2 = fPtr;
	e) printf("The value of number2 is %f\n", number2);
	f) printf("The address of number1 is %p\n", &number1);
	g) printf("The address stored is %p\n", fPtr); and value is the same

7.6)
	a) zPtr is not initialized, initialize it
	b) Pointer not dereferenced; number = *zPtr
	c) there is an extra * in front of zPtr[2]; remove it
	d) Outside of array bounds; < in stead of <=
	e) reference is void; change to number = *((int *)(sPtr);
	f) Using array name instead of pointer; use pointer